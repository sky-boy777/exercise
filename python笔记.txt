开放封闭原则：
封闭:已实现的功能代码块
开放：对扩展开发

浏览器访问一个url过程：
域名解析
通过IP找到服务器tcp连接
返回响应
浏览器渲染
关闭tcp连接

垃圾回收机制(GC)：
变量名存地址
内存：变量存在栈区，值存在堆区
1、引用计数：值有零个变量引用就会回收，访问不到了，手动减少计数：del 变量名
2、标记清除：解决相互引用(循环引用)带来内存泄漏，引用计数一直不能为0
3、分代回收：给一个权重，高的会隔很长时间才扫描一遍，解决引用计数的每次全部扫描缺点，但不能及时回收垃圾

python进程是真正的并行

http协议：请求和应答

进程间通信：
1、管道：无名管道、命名管道、高级管道
2、消息队列
3、内存映射(共享内存)
4、socket(套接字)，可用于不同机器间的进程通信
5、信号量
6、信号

封装、继承、多态：python可以多继承

python迭代器：节省内存空间，生成循环。生成器：让函数代码暂停执行，关键yield

GIL锁跟Cpython解释器有关，跟python语言无关，Cpython使同一时刻只能有一个**线程**在cup执行（上锁）只能是
 并发，多核cpy使用进程就是并行

互斥锁：逻辑上避免线程间死锁

深拷贝：全部数据拷贝过来。浅拷贝：拷贝最上层数据过来，再深层的是指向。
赋值操作只是指向，浅拷贝跟深拷贝一个元组则是指向，如果元组里面有列表，则深拷贝就是深拷贝，浅拷贝还是指向。


服务器（nginx）----WSGI协议--------web应用（django）

面向切面编程：
只管一点点地方，其它已经做好了

匿名函数：
fun = lambda x：x + 1
fun(1)
返回：2

闭包：
拥有函数功能，还有函数数据
一个函数里面有另一个函数，内部函数使用到外层函数的变量，返回内部函数
def fun(a):
    def fun2(b):
        print(a+b)
    return fun2

my_fun = fun(1)   my_fun得到fun的返回值fun2的函数引用
my_fun(2)   执行fun2函数
输出：3

nonlocal：在闭包里使用

装饰器：
改变原函数的指向，在不改变函数的情况下，给它运行前后加功能
在闭包基础上，传入参数为函数的引用
通用装饰器：有返回值，有不定参数
def f1(func):
    def f2(*args, **kwargs):
         print('验证')
         return func(*args, **kwargs)
    return f2

@f1    #  等价于 test = f1(test)
test()

多个装饰器先装下层的，调用则先最外层一层一层下去：
@f1
@f2
fun()
先执行@f2

带参数装饰器：
在外面再包一层，先调用参数，在返回内层装饰器
def s(num)
    def f1(func):
        def f2(*args, **kwargs):
             print('验证')
             return func(*args, **kwargs)
        return f2
    return f1

@f1(100)    #  等价于 test = f1(test)
test()

类装饰器:
@MyClass
test()
或
@MyClass.静态方法
test()

python动态导入模块方式：ss = __import__(变量)

log日志：
五个级别，低---高
1、debug  详细信息
2、info   按预期运行
3、warning  警告
4、error  错误
5、critical  严重错误
一般是：年月日时分秒 哪个文件 第几行 日志级别 信息

元类：
在创建类的时候给它加功能，相当于装饰器最顶层，元类创建类，是类的类，元类创建元类
元类--->类--->实例对象

type就是一个元类，创建类：
myclass = type('MyClass', (元组要继承的类,), {'a':1, 'b':2, 'fun': 实例方法，静态方法...})
等价于：
class MyClass: 
    a=1
    b=2


globals()可以查看所有全局对象(函数、变量、类等)的引用，返回的是字典
a=1
def a():
    pass

a会覆盖，指向一个函数

ORM：
对象--关系，映射django核心
数据库：类名对应表名，类属性对应字段
解决不用手写SQL

is：比较id
==：比较值


